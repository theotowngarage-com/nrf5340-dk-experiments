diff --git a/boards/arm/nrf5340dk_nrf5340/nrf5340_cpuapp_common.dts b/boards/arm/nrf5340dk_nrf5340/nrf5340_cpuapp_common.dts
index bd624bac93..b0019c873f 100644
--- a/boards/arm/nrf5340dk_nrf5340/nrf5340_cpuapp_common.dts
+++ b/boards/arm/nrf5340dk_nrf5340/nrf5340_cpuapp_common.dts
@@ -83,7 +83,7 @@
 	status = "okay";
 };
 
-&i2c1 {
+arduino_i2c: &i2c1 {
 	compatible = "nordic,nrf-twim";
 	status = "okay";
 	sda-pin = <34>;
diff --git a/boards/arm/nrf5340dk_nrf5340/nrf5340dk_nrf5340_cpuapp.dts b/boards/arm/nrf5340dk_nrf5340/nrf5340dk_nrf5340_cpuapp.dts
index 8a5f87e432..c6383c1a86 100644
--- a/boards/arm/nrf5340dk_nrf5340/nrf5340dk_nrf5340_cpuapp.dts
+++ b/boards/arm/nrf5340dk_nrf5340/nrf5340dk_nrf5340_cpuapp.dts
@@ -19,9 +19,40 @@
 		zephyr,sram-secure-partition = &sram0_s;
 		zephyr,sram-non-secure-partition = &sram0_ns;
 	};
+
+	arduino_header: connector {
+		compatible = "arduino-header-r3";
+		#gpio-cells = <2>;
+		gpio-map-mask = <0xffffffff 0xffffffc0>;
+		gpio-map-pass-thru = <0 0x3f>;
+		gpio-map = <0 0 &gpio0 3 0>,	/* A0 */
+				 <1 0 &gpio0 4 0>,	/* A1 */
+				 <2 0 &gpio0 28 0>,	/* A2 */
+				 <3 0 &gpio0 29 0>,	/* A3 */
+				 <4 0 &gpio0 30 0>,	/* A4 */
+				 <5 0 &gpio0 31 0>,	/* A5 */
+				 <6 0 &gpio1 1 0>,	/* D0 */
+				 <7 0 &gpio1 2 0>,	/* D1 */
+				 <8 0 &gpio1 3 0>,	/* D2 */
+				 <9 0 &gpio1 4 0>,	/* D3 */
+				 <10 0 &gpio1 5 0>,	/* D4 */
+				 <11 0 &gpio1 6 0>,	/* D5 */
+				 <12 0 &gpio1 7 0>,	/* D6 */
+				 <13 0 &gpio1 8 0>,	/* D7 */
+				 <14 0 &gpio1 10 0>,	/* D8 */
+				 <15 0 &gpio1 11 0>,	/* D9 */
+				 <16 0 &gpio1 12 0>,	/* D10 */
+				 <17 0 &gpio1 13 0>,	/* D11 */
+				 <18 0 &gpio1 14 0>,	/* D12 */
+				 <19 0 &gpio1 15 0>,	/* D13 */
+				 <20 0 &gpio0 26 0>,	/* D14 */
+				 <21 0 &gpio0 27 0>;	/* D15 */
+	};
 };
 
-&spi2 {
+
+
+arduino_spi: &spi4 {
 	compatible = "nordic,nrf-spim";
 	status = "okay";
 	sck-pin = <47>;
diff --git a/boards/shields/adafruit_2_8_tft_touch_v2/adafruit_2_8_tft_touch_v2.overlay b/boards/shields/adafruit_2_8_tft_touch_v2/adafruit_2_8_tft_touch_v2.overlay
index e71a85d706..706c08f7e7 100644
--- a/boards/shields/adafruit_2_8_tft_touch_v2/adafruit_2_8_tft_touch_v2.overlay
+++ b/boards/shields/adafruit_2_8_tft_touch_v2/adafruit_2_8_tft_touch_v2.overlay
@@ -15,7 +15,7 @@
 	ili9340@0 {
 		compatible = "ilitek,ili9340";
 		label = "ILI9340";
-		spi-max-frequency = <15151515>;
+		spi-max-frequency = <24000000>;
 		reg = <0>;
 		cmd-data-gpios = <&arduino_header 15 GPIO_ACTIVE_LOW>;	/* D9 */
 		pixel-format = <ILI9XXX_PIXEL_FORMAT_RGB888>;
diff --git a/drivers/sensor/CMakeLists.txt b/drivers/sensor/CMakeLists.txt
index 04b6cece16..8eedd6de8d 100644
--- a/drivers/sensor/CMakeLists.txt
+++ b/drivers/sensor/CMakeLists.txt
@@ -77,6 +77,7 @@ add_subdirectory_ifdef(CONFIG_TEMP_KINETIS	nxp_kinetis_temp)
 add_subdirectory_ifdef(CONFIG_TACH_XEC		mchp_tach_xec)
 add_subdirectory_ifdef(CONFIG_ITDS		wsen_itds)
 add_subdirectory_ifdef(CONFIG_MCUX_ACMP		mcux_acmp)
+add_subdirectory_ifdef(CONFIG_MAX6675		max6675)
 
 zephyr_sources_ifdef(CONFIG_USERSPACE sensor_handlers.c)
 zephyr_sources_ifdef(CONFIG_SENSOR_SHELL sensor_shell.c)
diff --git a/drivers/sensor/Kconfig b/drivers/sensor/Kconfig
index e6611d053f..a721c5fc66 100644
--- a/drivers/sensor/Kconfig
+++ b/drivers/sensor/Kconfig
@@ -194,4 +194,6 @@ source "drivers/sensor/wsen_itds/Kconfig"
 
 source "drivers/sensor/mcux_acmp/Kconfig"
 
+source "drivers/sensor/max6675/Kconfig"
+
 endif # SENSOR
diff --git a/drivers/sensor/max6675/CMakeLists.txt b/drivers/sensor/max6675/CMakeLists.txt
new file mode 100644
index 0000000000..2bdd6aaa23
--- /dev/null
+++ b/drivers/sensor/max6675/CMakeLists.txt
@@ -0,0 +1,5 @@
+# Copyright (c) 2021 Michal Milkowski <c00@wp.pl>
+# SPDX-License-Identifier: Apache-2.0
+
+zephyr_library_sources_ifdef(CONFIG_MAX6675            max6675.c)
+zephyr_library_sources_ifdef(CONFIG_MAX6675            max6675_spi.c)
diff --git a/drivers/sensor/max6675/Kconfig b/drivers/sensor/max6675/Kconfig
new file mode 100644
index 0000000000..a0f250f679
--- /dev/null
+++ b/drivers/sensor/max6675/Kconfig
@@ -0,0 +1,15 @@
+# MAX6675 K-Thermocouple-to-Digital Converter
+
+# Copyright (c) 2021 Michal Milkowski <c00@wp.pl>
+# SPDX-License-Identifier: Apache-2.0
+
+menuconfig MAX6675
+	bool "MS5607 K-Thermocouple-to-Digital Converter"
+	depends on SPI
+	help
+	  Enable driver for MAX6675 K-Thermocouple-to-Digital Converter.
+
+if MAX6675
+
+
+endif # MAX6675
diff --git a/drivers/sensor/max6675/max6675.c b/drivers/sensor/max6675/max6675.c
new file mode 100644
index 0000000000..699c76b855
--- /dev/null
+++ b/drivers/sensor/max6675/max6675.c
@@ -0,0 +1,121 @@
+/*
+ * Copyright (c) 2021 Michal Milkowski <c00@wp.pl>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#define DT_DRV_COMPAT maxim_max6675
+
+#include <init.h>
+#include <kernel.h>
+#include <sys/byteorder.h>
+#include <drivers/sensor.h>
+#include <sys/__assert.h>
+
+#include "max6675.h"
+
+#define LOG_LEVEL CONFIG_SENSOR_LOG_LEVEL
+#include <logging/log.h>
+LOG_MODULE_REGISTER(max6675);
+
+static int max6675_get_measurement(const struct max6675_data *data,
+				  uint16_t *val)
+{
+	int err;
+
+	*val = 0U;
+
+	err = data->tf->read_adc(data, val);
+	if (err < 0) {
+		return err;
+	}
+
+	return 0;
+}
+
+static int max6675_sample_fetch(const struct device *dev,
+			       enum sensor_channel channel)
+{
+	struct max6675_data *data = dev->data;
+	int err;
+	uint16_t adc_temperature;
+
+	__ASSERT_NO_MSG(channel == SENSOR_CHAN_ALL);
+
+	err = max6675_get_measurement(data,
+				     &adc_temperature);
+	if (err < 0) {
+		return err;
+	}
+
+	data->temperature = (int32_t)adc_temperature;
+
+	return 0;
+}
+
+static int max6675_channel_get(const struct device *dev,
+			      enum sensor_channel chan,
+			      struct sensor_value *val)
+{
+	const struct max6675_data *data = dev->data;
+
+	switch (chan) {
+	case SENSOR_CHAN_AMBIENT_TEMP:
+		val->val1 = data->temperature >> 2;
+		val->val2 = data->temperature & BIT_MASK(2);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct max6675_config max6675_config = {
+	.max6675_device_name = DT_INST_BUS_LABEL(0),
+};
+
+static int max6675_init(const struct device *dev)
+{
+	const struct max6675_config *const config = dev->config;
+	struct max6675_data *data = dev->data;
+	struct sensor_value val;
+	int err;
+
+	data->max6675_device = device_get_binding(config->max6675_device_name);
+	if (!data->max6675_device) {
+		LOG_ERR("master not found: %s", config->max6675_device_name);
+		return -EINVAL;
+	}
+
+#if DT_ANY_INST_ON_BUS_STATUS_OKAY(spi)
+	max6675_spi_init(dev);
+#else
+    BUILD_ASSERT(1, "SPI interface required");
+#endif
+
+	data->temperature = 0;
+
+	err = data->tf->reset(data);
+	if (err < 0) {
+		return err;
+	}
+
+	return 0;
+}
+
+static const struct sensor_driver_api max6675_api_funcs = {
+	.sample_fetch = max6675_sample_fetch,
+	.channel_get = max6675_channel_get,
+};
+
+static struct max6675_data max6675_data;
+
+DEVICE_DT_INST_DEFINE(0,
+		    max6675_init,
+		    device_pm_control_nop,
+		    &max6675_data,
+		    &max6675_config,
+		    POST_KERNEL,
+		    CONFIG_SENSOR_INIT_PRIORITY,
+		    &max6675_api_funcs);
diff --git a/drivers/sensor/max6675/max6675.h b/drivers/sensor/max6675/max6675.h
new file mode 100644
index 0000000000..4bb0a3911f
--- /dev/null
+++ b/drivers/sensor/max6675/max6675.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2021 Michal Milkowski <c00@wp.pl>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#ifndef __SENSOR_MAX6675_H__
+#define __SENSOR_MAX6675_H__
+
+#include <zephyr/types.h>
+#include <device.h>
+
+
+#if DT_ANY_INST_ON_BUS_STATUS_OKAY(spi)
+int max6675_spi_init(const struct device *dev);
+#else
+// BUILD_ASSERT(1, "I2c interface not implemented yet");
+#endif
+
+struct max6675_config {
+	char *max6675_device_name;
+};
+
+struct max6675_data {
+	const struct device *max6675_device;
+	const struct max6675_transfer_function *tf;
+
+	/* Measured values */
+	int32_t temperature;
+
+	/* conversion commands */
+	uint8_t pressure_conv_delay;
+	uint8_t temperature_conv_delay;
+};
+
+struct max6675_transfer_function {
+	int (*reset)(const struct max6675_data *data);
+	int (*read_adc)(const struct max6675_data *data, uint32_t *val);
+};
+
+#endif /* __SENSOR_MAX6675_H__*/
diff --git a/drivers/sensor/max6675/max6675_spi.c b/drivers/sensor/max6675/max6675_spi.c
new file mode 100644
index 0000000000..defef3943e
--- /dev/null
+++ b/drivers/sensor/max6675/max6675_spi.c
@@ -0,0 +1,130 @@
+/*
+ * Copyright (c) 2021 Michal Milkowski <c00@wp.pl>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#define DT_DRV_COMPAT maxim_max6675
+
+#include <string.h>
+#include <drivers/spi.h>
+#include <sys/byteorder.h>
+#include "max6675.h"
+
+#define ID_BIT_MASK BIT(1)
+#define THERMOCOUPLE_MASK BIT(2)
+
+#define LOG_LEVEL CONFIG_SENSOR_LOG_LEVEL
+#include <logging/log.h>
+LOG_MODULE_DECLARE(max6675);
+
+
+#if DT_ANY_INST_ON_BUS_STATUS_OKAY(spi)
+
+#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
+static struct spi_cs_control max6675_cs_ctrl;
+#endif
+
+#define SPI_CS NULL
+
+static struct spi_config max6675_spi_conf = {
+	.frequency = DT_INST_PROP(0, spi_max_frequency),
+	.operation = (SPI_OP_MODE_MASTER | SPI_WORD_SET(8) |
+		      SPI_MODE_CPOL | SPI_MODE_CPHA |
+		      SPI_TRANSFER_MSB |
+		      SPI_LINES_SINGLE),
+	.slave = DT_INST_REG_ADDR(0),
+	.cs = SPI_CS,
+};
+
+static int max6675_spi_read(const struct max6675_data *data, uint16_t *val)
+{
+	int err;
+	uint16_t adc_value;
+	uint16_t dummy_write = 0;
+
+	const struct spi_buf tx_buf = {
+		.buf = &dummy_write,
+		.len = 2,
+	};
+
+
+	const struct spi_buf rx_buf = {
+		.buf = &adc_value,
+		.len = 2,
+	};
+
+	const struct spi_buf_set rx_buf_set = {
+		.buffers = &rx_buf,
+		.count = 1,
+	};
+
+	const struct spi_buf_set tx_buf_set = {
+		.buffers = &tx_buf,
+		.count = 1,
+	};
+
+	err = spi_transceive(data->max6675_device,
+			     &max6675_spi_conf,
+			     &tx_buf_set,
+			     &rx_buf_set);
+	if (err < 0) {
+		return err;
+	}
+
+	adc_value = sys_be16_to_cpu(adc_value);
+	LOG_DBG("Raw value: 0x%04x", adc_value);
+	if(adc_value & ID_BIT_MASK) {
+		return -ENODEV;
+	} else if(adc_value & THERMOCOUPLE_MASK) {
+		return -EFAULT;
+	}
+	*val = (adc_value >> 3) & 0x0FFF;
+	return 0;
+}
+
+static int max6675_spi_reset(const struct max6675_data *data)
+{
+	uint16_t dummy_read;
+	int err = max6675_spi_read(data, &dummy_read);
+
+	// if (err < 0) {
+	// 	return err;
+	// }
+
+	return 0;
+}
+
+static const struct max6675_transfer_function max6675_spi_transfer_function = {
+	.reset = max6675_spi_reset,
+	.read_adc = max6675_spi_read,
+};
+
+int max6675_spi_init(const struct device *dev)
+{
+	struct max6675_data *data = dev->data;
+
+	data->tf = &max6675_spi_transfer_function;
+
+#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
+	max6675_cs_ctrl.gpio_dev = device_get_binding(
+		DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
+	if (!max6675_cs_ctrl.gpio_dev) {
+		LOG_ERR("Unable to get GPIO SPI CS device");
+		return -ENODEV;
+	}
+
+	max6675_cs_ctrl.gpio_pin = DT_INST_SPI_DEV_CS_GPIOS_PIN(0);
+	max6675_cs_ctrl.gpio_dt_flags = DT_INST_SPI_DEV_CS_GPIOS_FLAGS(0);
+	max6675_cs_ctrl.delay = 0U;
+
+	max6675_spi_conf.cs = &max6675_cs_ctrl;
+
+	LOG_DBG("SPI GPIO CS configured on %s:%u",
+		DT_INST_SPI_DEV_CS_GPIOS_LABEL(0),
+		DT_INST_SPI_DEV_CS_GPIOS_PIN(0));
+#endif
+	return 0;
+}
+
+#endif
diff --git a/dts/bindings/sensor/maxim,max6675.yaml b/dts/bindings/sensor/maxim,max6675.yaml
new file mode 100644
index 0000000000..e1e9b98294
--- /dev/null
+++ b/dts/bindings/sensor/maxim,max6675.yaml
@@ -0,0 +1,10 @@
+# Copyright (c) 2021, Michal Milkowski <c00@wp.pl>
+# SPDX-License-Identifier: Apache-2.0
+
+description: |
+    Cold-Junction-Compensated K-Thermocouple-to-Digital Converter  
+    The Datasheet is at https://datasheets.maximintegrated.com/en/ds/MAX6675.pdf
+
+compatible: "maxim,max6675"
+
+include: spi-device.yaml
diff --git a/include/bluetooth/conn.h b/include/bluetooth/conn.h
index ae013c9d59..3ae51bcdf9 100644
--- a/include/bluetooth/conn.h
+++ b/include/bluetooth/conn.h
@@ -877,7 +877,7 @@ struct bt_conn_cb {
 	 *  increase @option{CONFIG_BT_MAX_CONN}.
 	 *
 	 *  @param conn Connection object.
-	 *  @param reason HCI reason for the disconnection.
+	 *  @param   HCI reason for the disconnection.
 	 */
 	void (*disconnected)(struct bt_conn *conn, uint8_t reason);
 
diff --git a/samples/display/lvgl/CMakeLists.txt b/samples/display/lvgl/CMakeLists.txt
index 7dd67d404c..3b9dfe55d9 100644
--- a/samples/display/lvgl/CMakeLists.txt
+++ b/samples/display/lvgl/CMakeLists.txt
@@ -2,6 +2,8 @@
 
 cmake_minimum_required(VERSION 3.13.1)
 
+set(SHIELD adafruit_2_8_tft_touch_v2)
+
 find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
 project(lvgl)
 
diff --git a/samples/display/lvgl/nrf5340dk_nrf5340_cpuappns.overlay b/samples/display/lvgl/nrf5340dk_nrf5340_cpuappns.overlay
new file mode 100644
index 0000000000..263a341613
--- /dev/null
+++ b/samples/display/lvgl/nrf5340dk_nrf5340_cpuappns.overlay
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2020 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+/ {
+	arduino_header: connector {
+		compatible = "arduino-header-r3";
+		#gpio-cells = <2>;
+		gpio-map-mask = <0xffffffff 0xffffffc0>;
+		gpio-map-pass-thru = <0 0x3f>;
+		gpio-map = <0 0 &gpio0 3 0>,	/* A0 */
+			   <1 0 &gpio0 4 0>,	/* A1 */
+			   <2 0 &gpio0 28 0>,	/* A2 */
+			   <3 0 &gpio0 29 0>,	/* A3 */
+			   <4 0 &gpio0 30 0>,	/* A4 */
+			   <5 0 &gpio0 31 0>,	/* A5 */
+			   <6 0 &gpio1 1 0>,	/* D0 */
+			   <7 0 &gpio1 2 0>,	/* D1 */
+			   <8 0 &gpio1 3 0>,	/* D2 */
+			   <9 0 &gpio1 4 0>,	/* D3 */
+			   <10 0 &gpio1 5 0>,	/* D4 */
+			   <11 0 &gpio1 6 0>,	/* D5 */
+			   <12 0 &gpio1 7 0>,	/* D6 */
+			   <13 0 &gpio1 8 0>,	/* D7 */
+			   <14 0 &gpio1 10 0>,	/* D8 */
+			   <15 0 &gpio1 11 0>,	/* D9 */
+			   <16 0 &gpio1 12 0>,	/* D10 */
+			   <17 0 &gpio1 13 0>,	/* D11 */
+			   <18 0 &gpio1 14 0>,	/* D12 */
+			   <19 0 &gpio1 15 0>,	/* D13 */
+			   <20 0 &gpio0 26 0>,	/* D14 */
+			   <21 0 &gpio0 27 0>;	/* D15 */
+	};
+
+	arduino_adc: analog-connector {
+		compatible = "arduino,uno-adc";
+		#io-channel-cells = <1>;
+		io-channel-map = <0 &adc 1>,	/* A0 = P0.3 = AIN1 */
+				 <1 &adc 2>,	/* A1 = P0.4 = AIN2 */
+				 <2 &adc 4>,	/* A2 = P0.28 = AIN4 */
+				 <3 &adc 5>,	/* A3 = P0.29 = AIN5 */
+				 <4 &adc 6>,	/* A4 = P0.30 = AIN6 */
+				 <5 &adc 7>;	/* A5 = P0.31 = AIN7 */
+	};
+
+};
+
+arduino_i2c: &i2c0 {
+	compatible = "nordic,nrf-twi";
+	status = "okay";
+	sda-pin = <26>;
+	scl-pin = <27>;
+};
+
+arduino_spi: &spi3 {
+	status = "okay";
+	sck-pin = <47>;
+	miso-pin = <46>;
+	mosi-pin = <45>;
+	cs-gpios = <&arduino_header 16 GPIO_ACTIVE_LOW>; /* D10 */
+};
+
+/*
+arduino_serial: &uart1 {
+	status = "okay";
+	current-speed = <115200>;
+	rx-pin = <33>;
+	tx-pin = <34>;
+};
+*/
\ No newline at end of file
diff --git a/samples/display/lvgl/src/main.c b/samples/display/lvgl/src/main.c
index b176f2abc5..868f69717a 100644
--- a/samples/display/lvgl/src/main.c
+++ b/samples/display/lvgl/src/main.c
@@ -22,6 +22,7 @@ void main(void)
 	const struct device *display_dev;
 	lv_obj_t *hello_world_label;
 	lv_obj_t *count_label;
+        LOG_INF("Starting display");
 
 	display_dev = device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
 
diff --git a/samples/drivers/display/CMakeLists.txt b/samples/drivers/display/CMakeLists.txt
index 68c139b894..79aca21cc1 100644
--- a/samples/drivers/display/CMakeLists.txt
+++ b/samples/drivers/display/CMakeLists.txt
@@ -1,6 +1,9 @@
 # SPDX-License-Identifier: Apache-2.0
 
 cmake_minimum_required(VERSION 3.13.1)
+
+set(SHIELD adafruit_2_8_tft_touch_v2)
+
 find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
 project(display)
 
diff --git a/samples/sensor/dht/boards/nrf5340dk_nrf5340_cpuappns.overlay b/samples/sensor/dht/boards/nrf5340dk_nrf5340_cpuappns.overlay
new file mode 100644
index 0000000000..f633c1604c
--- /dev/null
+++ b/samples/sensor/dht/boards/nrf5340dk_nrf5340_cpuappns.overlay
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) 2019 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+/ {
+	dht22 {
+		compatible = "aosong,dht";
+		status = "okay";
+		label = "DHT22";
+		dio-gpios = <&gpio1 0 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
+		dht22;
+	};
+};
diff --git a/samples/sensor/dht/src/main.c b/samples/sensor/dht/src/main.c
index 922a2a2c2c..121923b8b1 100644
--- a/samples/sensor/dht/src/main.c
+++ b/samples/sensor/dht/src/main.c
@@ -45,7 +45,8 @@ void main(void)
 
 		if (rc != 0) {
 			printf("Sensor fetch failed: %d\n", rc);
-			break;
+                        k_sleep(K_SECONDS(2));
+			continue;
 		}
 
 		struct sensor_value temperature;
diff --git a/samples/sensor/max6675/CMakeLists.txt b/samples/sensor/max6675/CMakeLists.txt
new file mode 100644
index 0000000000..b02587d573
--- /dev/null
+++ b/samples/sensor/max6675/CMakeLists.txt
@@ -0,0 +1,11 @@
+#
+#  Copyright (c) 2018 Analog Devices Inc.
+#
+#  SPDX-License-Identifier: Apache-2.0
+#
+cmake_minimum_required(VERSION 3.13.1)
+find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
+project(max6675)
+
+FILE(GLOB app_sources src/*.c)
+target_sources(app PRIVATE ${app_sources})
diff --git a/samples/sensor/max6675/boards/nrf5340dk_nrf5340_cpuappns.overlay b/samples/sensor/max6675/boards/nrf5340dk_nrf5340_cpuappns.overlay
new file mode 100644
index 0000000000..40fa575450
--- /dev/null
+++ b/samples/sensor/max6675/boards/nrf5340dk_nrf5340_cpuappns.overlay
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) 2019 Linaro Limited
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+&spi2 {
+	cs-gpios = <&gpio1 0 GPIO_ACTIVE_LOW>;
+	max6675@0 {
+		compatible = "maxim,max6675";
+		reg = <0>;
+		spi-max-frequency = <4000000>;
+		label = "MAX6675";
+	};
+};
diff --git a/samples/sensor/max6675/prj.conf b/samples/sensor/max6675/prj.conf
new file mode 100644
index 0000000000..12ac3f80de
--- /dev/null
+++ b/samples/sensor/max6675/prj.conf
@@ -0,0 +1,9 @@
+CONFIG_STDOUT_CONSOLE=y
+CONFIG_LOG=y
+CONFIG_SPI=y
+CONFIG_SENSOR=y
+CONFIG_MAX6675=y
+CONFIG_MAX6675_SPI=y
+CONFIG_SENSOR_LOG_LEVEL_WRN=y
+
+CONFIG_CBPRINTF_FP_SUPPORT=y
diff --git a/samples/sensor/max6675/sample.yaml b/samples/sensor/max6675/sample.yaml
new file mode 100644
index 0000000000..778ac809a5
--- /dev/null
+++ b/samples/sensor/max6675/sample.yaml
@@ -0,0 +1,3 @@
+sample:
+  name: MAX6675 K-Thermocouple-to-Digital Converter 
+
diff --git a/samples/sensor/max6675/src/main.c b/samples/sensor/max6675/src/main.c
new file mode 100644
index 0000000000..d76cd656a7
--- /dev/null
+++ b/samples/sensor/max6675/src/main.c
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2018 Analog Devices Inc.
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <zephyr.h>
+#include <drivers/sensor.h>
+#include <stdio.h>
+
+#define pow2(x) ((x) * (x))
+
+static double sqrt(double value)
+{
+	int i;
+	double sqrt = value / 3;
+
+	if (value <= 0) {
+		return 0;
+	}
+
+	for (i = 0; i < 6; i++) {
+		sqrt = (sqrt + value / sqrt) / 2;
+	}
+
+	return sqrt;
+}
+
+K_SEM_DEFINE(sem, 0, 1);
+
+static void trigger_handler(const struct device *dev,
+			    struct sensor_trigger *trigger)
+{
+	ARG_UNUSED(trigger);
+
+	if (sensor_sample_fetch(dev)) {
+		printf("sensor_sample_fetch failed\n");
+		return;
+	}
+
+	k_sem_give(&sem);
+}
+
+void main(void)
+{
+	struct sensor_value accel[3];
+	double mag;
+	int i;
+	char meter[200];
+
+	const struct device *dev = device_get_binding(DT_LABEL(DT_INST(0, adi_adxl372)));
+
+	if (dev == NULL) {
+		printf("Could not get %s device\n", DT_LABEL(DT_INST(0, adi_adxl372)));
+		return;
+	}
+
+	struct sensor_trigger trig = {
+		.type = SENSOR_TRIG_DATA_READY,
+		.chan = SENSOR_CHAN_ACCEL_XYZ,
+	};
+
+	if (IS_ENABLED(CONFIG_ADXL372_PEAK_DETECT_MODE)) {
+		trig.type = SENSOR_TRIG_THRESHOLD;
+	}
+
+	if (IS_ENABLED(CONFIG_ADXL372_TRIGGER)) {
+		if (sensor_trigger_set(dev, &trig, trigger_handler)) {
+			printf("Could not set trigger\n");
+			return;
+		}
+	}
+
+	while (1) {
+		if (IS_ENABLED(CONFIG_ADXL372_TRIGGER)) {
+			if (IS_ENABLED(CONFIG_ADXL372_PEAK_DETECT_MODE)) {
+				printf("Waiting for a threshold event\n");
+			}
+			k_sem_take(&sem, K_FOREVER);
+		} else {
+			if (sensor_sample_fetch(dev)) {
+				printf("sensor_sample_fetch failed\n");
+			}
+		}
+
+		sensor_channel_get(dev, SENSOR_CHAN_ACCEL_XYZ, accel);
+
+		if (IS_ENABLED(CONFIG_ADXL372_PEAK_DETECT_MODE)) {
+			mag = sqrt(pow2(sensor_ms2_to_g(&accel[0])) +
+				pow2(sensor_ms2_to_g(&accel[1])) +
+				pow2(sensor_ms2_to_g(&accel[2])));
+
+			for (i = 0; i <= mag && i < (sizeof(meter) - 1); i++) {
+				meter[i] = '#';
+			}
+
+			meter[i] = '\0';
+
+			printf("%6.2f g: %s\n", mag, meter);
+		} else {
+			printf("AX=%10.2f AY=%10.2f AZ=%10.2f (m/s^2)\n",
+				sensor_value_to_double(&accel[0]),
+				sensor_value_to_double(&accel[1]),
+				sensor_value_to_double(&accel[2]));
+		}
+
+		if (!IS_ENABLED(CONFIG_ADXL372_TRIGGER)) {
+			k_sleep(K_MSEC(2000));
+		}
+	}
+}
diff --git a/share/zephyr-package/cmake/current_path.txt b/share/zephyr-package/cmake/current_path.txt
new file mode 100644
index 0000000000..37356cf479
--- /dev/null
+++ b/share/zephyr-package/cmake/current_path.txt
@@ -0,0 +1 @@
+C:/Users/c00/ncs/v1.5.0/zephyr/share/zephyr-package/cmake
\ No newline at end of file
